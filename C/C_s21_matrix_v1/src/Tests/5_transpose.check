#test transpose_1
matrix_t A;
matrix_t C;
s21_create_matrix(2, 3, &A);
A.matrix[0][0] = 1;
A.matrix[0][1] = 2;
A.matrix[0][2] = 3;
A.matrix[1][0] = 4;
A.matrix[1][1] = 5;
A.matrix[1][2] = 6;
int err = s21_transpose(&A, &C);
ck_assert_int_eq(err, OK);
ck_assert_double_eq(C.matrix[0][0], 1);
ck_assert_double_eq(C.matrix[0][1], 4);
ck_assert_double_eq(C.matrix[1][0], 2);
ck_assert_double_eq(C.matrix[1][1], 5);
ck_assert_double_eq(C.matrix[2][0], 3);
ck_assert_double_eq(C.matrix[2][1], 6);
s21_remove_matrix(&A);
s21_remove_matrix(&C);

#test transpose_2
matrix_t A;
matrix_t C;
s21_create_matrix(3, 2, &A);
A.matrix[0][0] = 1;
A.matrix[0][1] = 4;
A.matrix[1][0] = 2;
A.matrix[1][1] = 5;
A.matrix[2][0] = 3;
A.matrix[2][1] = 6;
int err = s21_transpose(&A, &C);
ck_assert_int_eq(err, OK);
ck_assert_double_eq(C.matrix[0][0], 1);
ck_assert_double_eq(C.matrix[0][1], 2);
ck_assert_double_eq(C.matrix[0][2], 3);
ck_assert_double_eq(C.matrix[1][0], 4);
ck_assert_double_eq(C.matrix[1][1], 5);
ck_assert_double_eq(C.matrix[1][2], 6);
s21_remove_matrix(&A);
s21_remove_matrix(&C);

#test transpose_3
int err = s21_transpose(NULL, NULL);
ck_assert_int_eq(err, ERROR_INCORRECT_MATRIX);
