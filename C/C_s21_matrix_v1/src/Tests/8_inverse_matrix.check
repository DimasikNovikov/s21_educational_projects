#test inverse_matrix_1
matrix_t A;
matrix_t R;
s21_create_matrix(3, 4, &A);
int err = s21_inverse_matrix(&A, &R);
ck_assert_int_eq(err, CALCULATION_ERROR);
s21_remove_matrix(&A);
s21_remove_matrix(&R);

#test inverse_matrix_2
matrix_t A;
matrix_t R;
s21_create_matrix(3, 3, &A);
A.matrix[0][0] = 1;
A.matrix[0][1] = 2;
A.matrix[0][2] = 3;
A.matrix[1][0] = 4;
A.matrix[1][1] = 5;
A.matrix[1][2] = 6;
A.matrix[2][0] = 7;
A.matrix[2][1] = 8;
A.matrix[2][2] = 9;
int err = s21_inverse_matrix(&A, &R);
ck_assert_int_eq(err, CALCULATION_ERROR);
s21_remove_matrix(&A);
s21_remove_matrix(&R);

#test inverse_matrix_3
matrix_t A;
matrix_t R;
matrix_t E;
s21_create_matrix(3, 3, &A);
A.matrix[0][0] = 2;
A.matrix[0][1] = 5;
A.matrix[0][2] = 7;
A.matrix[1][0] = 6;
A.matrix[1][1] = 3;
A.matrix[1][2] = 4;
A.matrix[2][0] = 5;
A.matrix[2][1] = -2;
A.matrix[2][2] = -3;
int err = s21_inverse_matrix(&A, &R);
ck_assert_int_eq(err, OK);
ck_assert_double_eq(R.matrix[0][0], 1);
ck_assert_double_eq(R.matrix[0][1], -1);
ck_assert_double_eq(R.matrix[0][2], 1);
ck_assert_double_eq(R.matrix[1][0], -38);
ck_assert_double_eq(R.matrix[1][1], 41);
ck_assert_double_eq(R.matrix[1][2], -34);
ck_assert_double_eq(R.matrix[2][0], 27);
ck_assert_double_eq(R.matrix[2][1], -29);
ck_assert_double_eq(R.matrix[2][2], 24);
s21_mult_matrix(&A, &R, &E);
ck_assert_double_eq(E.matrix[0][0], 1);
ck_assert_double_eq(E.matrix[0][1], 0);
ck_assert_double_eq(E.matrix[0][2], 0);
ck_assert_double_eq(E.matrix[1][0], 0);
ck_assert_double_eq(E.matrix[1][1], 1);
ck_assert_double_eq(E.matrix[1][2], 0);
ck_assert_double_eq(E.matrix[2][0], 0);
ck_assert_double_eq(E.matrix[2][1], 0);
ck_assert_double_eq(E.matrix[2][2], 1);
s21_remove_matrix(&A);
s21_remove_matrix(&R);
s21_remove_matrix(&E);

