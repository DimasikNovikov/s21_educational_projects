#test mult_matrix_by_number_1
matrix_t A;
matrix_t C;
s21_create_matrix(3, 3, &A);
A.matrix[0][0] = 1;
A.matrix[0][1] = 2;
A.matrix[0][2] = 3;
A.matrix[1][0] = 0;
A.matrix[1][1] = 4;
A.matrix[1][2] = 2;
A.matrix[2][0] = 2;
A.matrix[2][1] = 3;
A.matrix[2][2] = 4;
int err = s21_mult_number(&A, 2, &C);
ck_assert_int_eq(err, OK);
ck_assert_double_eq(C.matrix[0][0], 2);
ck_assert_double_eq(C.matrix[0][1], 4);
ck_assert_double_eq(C.matrix[0][2], 6);
ck_assert_double_eq(C.matrix[1][0], 0);
ck_assert_double_eq(C.matrix[1][1], 8);
ck_assert_double_eq(C.matrix[1][2], 4);
ck_assert_double_eq(C.matrix[2][0], 4);
ck_assert_double_eq(C.matrix[2][1], 6);
ck_assert_double_eq(C.matrix[2][2], 8);
s21_remove_matrix(&A);
s21_remove_matrix(&C);

#test mult_matrix_by_number_2
matrix_t A;
matrix_t C;
s21_create_matrix(3, 3, &A);
A.matrix[0][0] = 1;
A.matrix[0][1] = 2;
A.matrix[0][2] = 3;
A.matrix[1][0] = 0;
A.matrix[1][1] = 4;
A.matrix[1][2] = 2;
A.matrix[2][0] = 2;
A.matrix[2][1] = 3;
A.matrix[2][2] = 4;
int err = s21_mult_number(&A, -2, &C);
ck_assert_int_eq(err, OK);
ck_assert_double_eq(C.matrix[0][0], -2);
ck_assert_double_eq(C.matrix[0][1], -4);
ck_assert_double_eq(C.matrix[0][2], -6);
ck_assert_double_eq(C.matrix[1][0], -0);
ck_assert_double_eq(C.matrix[1][1], -8);
ck_assert_double_eq(C.matrix[1][2], -4);
ck_assert_double_eq(C.matrix[2][0], -4);
ck_assert_double_eq(C.matrix[2][1], -6);
ck_assert_double_eq(C.matrix[2][2], -8);
s21_remove_matrix(&A);
s21_remove_matrix(&C);


#test mult_matrix_by_matrix_1
matrix_t A;
matrix_t B;
matrix_t C;
s21_create_matrix(3, 3, &A);
s21_create_matrix(5, 3, &B);
int err = s21_mult_matrix(&A, &B, &C);
ck_assert_int_eq(err, CALCULATION_ERROR);
s21_remove_matrix(&A);
s21_remove_matrix(&B);
s21_remove_matrix(&C);

#test mult_matrix_by_matrix_2
matrix_t A;
matrix_t B;
matrix_t C;
s21_create_matrix(3, 2, &A);
s21_create_matrix(2, 3, &B);
A.matrix[0][0] = 1;
A.matrix[0][1] = 4;
A.matrix[1][0] = 2;
A.matrix[1][1] = 5;
A.matrix[2][0] = 3;
A.matrix[2][1] = 6;
B.matrix[0][0] = 1;
B.matrix[0][1] = -1;
B.matrix[0][2] = 1;
B.matrix[1][0] = 2;
B.matrix[1][1] = 3;
B.matrix[1][2] = 4;
int err = s21_mult_matrix(&A, &B, &C);
ck_assert_int_eq(err, OK);
ck_assert_double_eq(C.matrix[0][0], 9);
ck_assert_double_eq(C.matrix[0][1], 11);
ck_assert_double_eq(C.matrix[0][2], 17);
ck_assert_double_eq(C.matrix[1][0], 12);
ck_assert_double_eq(C.matrix[1][1], 13);
ck_assert_double_eq(C.matrix[1][2], 22);
ck_assert_double_eq(C.matrix[2][0], 15);
ck_assert_double_eq(C.matrix[2][1], 15);
ck_assert_double_eq(C.matrix[2][2], 27);
s21_remove_matrix(&A);
s21_remove_matrix(&B);
s21_remove_matrix(&C);

#test mult_matrix_by_matrix_3
matrix_t A;
matrix_t B;
matrix_t C;
s21_create_matrix(1, 2, &A);
s21_create_matrix(2, 3, &B);
A.matrix[0][0] = 1;
A.matrix[0][1] = 1;
B.matrix[0][0] = 2;
B.matrix[0][1] = 2;
B.matrix[0][2] = 2;
B.matrix[1][0] = 2;
B.matrix[1][1] = 2;
B.matrix[1][2] = 2;
int err = s21_mult_matrix(&A, &B, &C);
ck_assert_int_eq(err, OK);
ck_assert_double_eq(C.matrix[0][0], 4);
ck_assert_double_eq(C.matrix[0][1], 4);
ck_assert_double_eq(C.matrix[0][2], 4);
s21_remove_matrix(&A);
s21_remove_matrix(&B);
s21_remove_matrix(&C);